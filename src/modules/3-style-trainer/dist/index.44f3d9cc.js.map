{"mappings":"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vB5B,IAAME,EAAuB,CAClC,CACE,OACA,OACA,QACA,UACA,QACA,IACA,OACA,OACA,OACA,QACA,KACA,SACA,MACA,KACA,KACA,MACA,QACA,OACA,KACA,UACA,GACA,WACA,IACA,SAEF,CACE,QACA,QACA,UACA,QACA,OACA,QACA,WACA,UACA,WACA,KACA,OACA,OACA,QACA,WACA,MACA,GACA,UACA,UACA,SACA,QACA,KACA,OACA,SACA,KAEF,CACE,YACA,aACA,YACA,aACA,UACA,UACA,aACA,aACA,WACA,WACA,WACA,SACA,eACA,gBACA,UACA,YACA,WACA,YACA,SACA,cACA,GACA,kBAEF,CACE,aACA,aACA,aACA,YACA,WACA,YACA,YACA,aACA,UACA,YACA,WACA,WACA,GACA,iBACA,WACA,SACA,SACA,cACA,UACA,WAEF,CACE,WACA,KACA,KACA,SACA,UACA,QACA,QACA,OACA,cACA,IACA,QACA,UACA,WACA,QACA,OACA,UACA,GACA,cAEF,CACE,eACA,aACA,aACA,aACA,UACA,YACA,WACA,YACA,aACA,aACA,WACA,SACA,YACA,UACA,UACA,GACA,eACA,gBACA,iBACA,YACA,UAEF,CACE,UACA,YACA,cACA,SACA,aACA,aACA,YACA,aACA,GACA,gBACA,eACA,YACA,aACA,UACA,gBACA,YAEF,CACE,KACA,YACA,OACA,UACA,GACA,WACA,KACA,SACA,QACA,aACA,IACA,YACA,QACA,WAEF,CACE,WACA,YACA,eACA,cACA,eACA,cACA,GACA,mBACA,iBACA,UACA,cACA,cACA,aACA,eACA,iBACA,WACA,eACA,gBAEF,CACE,SACA,iBACA,YACA,aACA,UACA,YACA,aACA,UACA,GACA,oBACA,aACA,cAEF,CACE,GACA,iBACA,SACA,YACA,YACA,UACA,UACA,UACA,UACA,UAEF,CACE,GACA,4BACA,4BACA,qBACA,qBACA,oBACA,oBACA,kBACA,mBACA,oBACA,oBACA,kBACA,mBACA,kBACA,mBAEF,CACE,KACA,iBACA,KACA,iBACA,IACA,iBACA,GACA,oBAEF,CACE,mBACA,iBACA,iBACA,iBACA,GACA,oBAEF,CACE,qBACA,iCACA,GACA,wBAEF,CACE,sBACA,2BACA,sBACA,0BACA,sBACA,sBACA,GACA,kCACA,kCACA,sBACA,sBACA,6BAEF,CACE,sBACA,sBACA,yBACA,GACA,sCACA,sCACA,sBACA,2BACA,uBAEF,CAAC,GAAI,kCAAmC,mDCvR1CC,IACE,MAAMV,QAAgBW,EAAAC,QAAQ,SAASZ,UACvC,IAAIpB,EAAQoB,EAAQa,aACpB,IAAA,MAAWC,KAASL,EAClB7B,EAAQA,EAAMmC,SACZvG,EAAAwG,IAAI/C,kBAAmBJ,EAAAC,uBAA+BgD,KAG1D,gBFS2Bd,EAAkBpB,GAC7C,GAAIc,EAAyCM,EAAQa,aAAcjC,GACjE,OAAO,EAGT,IAAA,MAAWqC,IAAQ,SACjB,IAAA,IAAS3F,EAAS,EAAGA,EAAS,EAAGA,IAI/B,GAAIoE,EAHmBM,EACpBkB,qBAAqB,IAAI1G,EAAAwD,KAAKiD,EAAM3F,IACpC6F,WAC0DvC,GAC3D,OAAO,EAKb,OAAO,EEzBFwC,CAAapB,EAASpB,GAGpBA,EAFE8B,IAKX,IAAIW,EAEO,cACXC,IAGE,OAAQD,IAAAA,EAAiBhJ,EAAA,yBAK3BkJ,EAA+B9C,GAE7B,OADApB,IACO7C,EAAAwG,IAAI/C,kBACFqD,KAAuBE,WAAW7C,EAAiBF,oBAI9DgD,IACE,OAAOF,QAAeb,oBAGxBgB,WACSJ,KAAuBK,aAGhC,IAAMC,EAAiB,CACrB,CAAC,KAAM,KAAM,MAAO,MAAO,KAAM,OACjC,CAAC,KAAM,KAAM,MAAO,uBAGtBC,IACE,OAAOvE,QAA2BmE,IAAqBG,GAGzD,IAAME,EAAW,IAAItH,EAAAwG,IAAI,0BACzBe,IACE,MAAMvE,EAAa,IAAIhD,EAAAiD,WACjBuE,QAA2BP,IAKjC,OAJAjE,EAAWE,oBAAoBoE,GAE/BtE,EAAWE,oBAAoBsE,GAC/BxE,EAAWE,oBAAoBoE,GACxBtE,EAAWU,8CCnEpB+D,EAAAC,QAAclJ,OAAuB,KAAOX,EAAA,SAAA8J,QAA6C,UAAWC,MAAI,IAAO/J,EAAc","sources":["node_modules/@parcel/runtime-js/lib/runtime-edcd45f5c0d8be78.js","node_modules/cubing/src/cubing/vendor/random-uint-below/get-random-values.ts","node_modules/cubing/src/cubing/vendor/random-uint-below/random53BitValue.ts","node_modules/cubing/src/cubing/vendor/random-uint-below/random-choice.ts","node_modules/cubing/src/cubing/vendor/random-uint-below/index.ts","node_modules/cubing/src/cubing/notation/CountMoves.ts","node_modules/cubing/src/cubing/notation/CountAnimatedLeaves.ts","node_modules/cubing/src/cubing/search/inside/inside-worker.ts","node_modules/cubing/src/cubing/search/inside/solve/addOrientationSuffix.ts","node_modules/cubing/src/cubing/search/inside/solve/puzzles/3x3x3/convert.ts","node_modules/cubing/src/cubing/search/inside/solve/puzzles/3x3x3/filter.ts","node_modules/cubing/src/cubing/search/inside/solve/puzzles/3x3x3/legacy-sgs.ts","node_modules/cubing/src/cubing/search/inside/solve/puzzles/3x3x3/index.ts","node_modules/@parcel/runtime-js/lib/runtime-f1c787adc074e93b.js"],"sourcesContent":["require('./helpers/bundle-manifest').register(JSON.parse(\"{\\\"30J38\\\":\\\"index.44f3d9cc.js\\\",\\\"bDe2m\\\":\\\"3x3x3-min2phase-FPRJ5PCJ.68ac9f68.js\\\"}\"));","export type GetRandomValuesFunction = (arr: Uint32Array) => void;\n\n// This is a workaround for a `node` segfault.\n// In theory, imports are cached and safe to import multiple times: https://nodejs.org/api/esm.html#esm_urls\n// In practice, a rapid series of inline imports inside a worker causes a segfault(!) in `node`.\n// So we cache a single import reference. We avoid populating it until we first need it, so that we don't attempt to perform the import in environments that don't need or have it (e.g. browsers, `deno`).\nlet cryptoPromise: Promise<typeof import(\"crypto\")> | null = null;\n\n// `@types/node` is... lacking. This type may cause an error in the future, at which point we can hopefully use `@types/node` directly.\ntype NodeWebCrypto = typeof import(\"crypto\").webcrypto & {\n  getRandomValues: GetRandomValuesFunction;\n};\n\n// Mangled so that bundlers don't try to inline the source.\nconst cryptoMangled = \"cr-yp-to\";\nconst cryptoUnmangled = () => cryptoMangled.replace(/-/g, \"\");\n\n// We could use top-level await to define this more statically, but that has limited transpilation support.\nexport async function getRandomValuesFactory(): Promise<GetRandomValuesFunction> {\n  if (!globalThis?.crypto?.getRandomValues) {\n    const nodeWebcrypto = (await (cryptoPromise ??= import(cryptoUnmangled())))\n      .webcrypto as NodeWebCrypto;\n    return nodeWebcrypto.getRandomValues;\n  } else {\n    return crypto.getRandomValues.bind(crypto) as GetRandomValuesFunction;\n  }\n}\n","import {\n  getRandomValuesFactory,\n  GetRandomValuesFunction,\n} from \"./get-random-values\";\n\n/*\n * randomInt.below(max) returns a random non-negative integer less than max (0 <= output < max).\n * `max` must be at most 2^53.\n */\n\nconst MAX_JS_PRECISE_INT = 9007199254740992;\n\nconst UPPER_HALF_MULTIPLIER = 2097152; // 2^21. We have to use multiplication because bit shifts truncate to 32 bits.\nconst LOWER_HALF_DIVIDER = 2048;\n\nfunction random53BitValue(getRandomValues: GetRandomValuesFunction): number {\n  // Construct a random 53-bit value from a 32-bit upper half and a 21-bit lower half.\n  const arr = new Uint32Array(2);\n  getRandomValues(arr);\n  const upper = arr[0];\n  const lower = arr[1];\n  return (\n    Math.floor(upper * UPPER_HALF_MULTIPLIER) +\n    Math.floor(lower / LOWER_HALF_DIVIDER)\n  );\n}\n\nfunction validateMax(max: number): void {\n  if (typeof max !== \"number\" || max < 0 || Math.floor(max) !== max) {\n    throw new Error(\n      \"randomInt.below() not called with a positive integer value.\",\n    );\n  }\n  if (max > MAX_JS_PRECISE_INT) {\n    throw new Error(\n      `Called randomInt.below() with max == ${max}, which is larger than JavaScript can handle with integer precision.`,\n    );\n  }\n}\n\n// TODO: cache generated `randomUIntBelow`?\nexport async function randomUIntBelowFactory(): Promise<\n  (max: number) => number\n> {\n  const getRandomValues = await getRandomValuesFactory();\n  const randomUIntBelow = (max: number): number => {\n    validateMax(max);\n\n    const val = random53BitValue(getRandomValues);\n    const maxUniformSamplingRange = Math.floor(MAX_JS_PRECISE_INT / max) * max;\n\n    // Rejection sampling:\n    if (val < maxUniformSamplingRange) {\n      return val % max;\n    } else {\n      // val % max would produce a biased result. This bias an be very bad if `max` is on the order of MAX_JS_PRECISE_INT. We have to try again, so just call ourselves recursively.\n      // For some values of `max` just above 9007199254740992 / 2, this happens about once on average. For other values of `max`, it's less than that (and for small values of `max` it's extremely unlikely).\n\n      // TODO: Use more bits of accuracy instead of rejection sampling to avoid DoS.\n      return randomUIntBelow(max);\n    }\n  };\n  return randomUIntBelow;\n}\n","import { randomUIntBelowFactory } from \"./random53BitValue\";\n\n// Inspired by https://reference.wolfram.com/language/ref/RandomChoice.html\n// This library itself should be kept small, but a wrapper library may want to implement selecting multiple element without replacement as with replacement:\n// https://reference.wolfram.com/language/ref/RandomSample.html\nexport async function randomChoiceFactory<T>(): Promise<(arr: Array<T>) => T> {\n  const randomUIntBelow = await randomUIntBelowFactory();\n  return (arr: Array<T>): T => arr[randomUIntBelow(arr.length)];\n}\n","export { randomChoiceFactory } from \"./random-choice\";\nexport { randomUIntBelowFactory } from \"./random53BitValue\";\n\n// TODO: reuse factory properly, move this to a separate file, add to impl.\nimport { randomUIntBelowFactory } from \"./random53BitValue\";\nconst randomUIntBelowPromise = randomUIntBelowFactory();\nexport async function randomPermute<T>(list: T[]): Promise<void> {\n  for (let i = 1; i < list.length; i++) {\n    const j = (await randomUIntBelowPromise)(i);\n    [list[i], list[j]] = [list[j], list[i]];\n  }\n}\n","// TODO: move this file somewhere permanent.\nimport {\n  Alg,\n  Grouping,\n  LineComment,\n  Commutator,\n  Conjugate,\n  Move,\n  Newline,\n  Pause,\n  TraversalUp,\n} from \"../alg\";\n\n/*\n *   For movecount, that understands puzzle rotations.  This code\n *   should be moved to the alg class, probably.\n */\nclass CountMoves extends TraversalUp<number> {\n  constructor(private metric: (move: Move) => number) {\n    super();\n  }\n\n  public traverseAlg(alg: Alg): number {\n    let r = 0;\n    for (const unit of alg.units()) {\n      r += this.traverseUnit(unit);\n    }\n    return r;\n  }\n\n  public traverseGrouping(grouping: Grouping): number {\n    // const unit: Unit = Alg.fromString(\"SDf\");\n    // console.log(unit);\n    const alg: Alg = grouping.alg;\n    return this.traverseAlg(alg) * Math.abs(grouping.amount);\n  }\n\n  public traverseMove(move: Move): number {\n    return this.metric(move);\n  }\n\n  public traverseCommutator(commutator: Commutator): number {\n    return (\n      2 * (this.traverseAlg(commutator.A) + this.traverseAlg(commutator.B))\n    );\n  }\n\n  public traverseConjugate(conjugate: Conjugate): number {\n    return 2 * this.traverseAlg(conjugate.A) + this.traverseAlg(conjugate.B);\n  }\n\n  // TODO: Remove spaces between repeated pauses (in traverseSequence)\n  public traversePause(_pause: Pause): number {\n    return 0;\n  }\n\n  public traverseNewline(_newLine: Newline): number {\n    return 0;\n  }\n\n  // TODO: Enforce being followed by a newline (or the end of the alg)?\n  public traverseLineComment(_comment: LineComment): number {\n    return 0;\n  }\n}\n\nfunction isCharUppercase(c: string): boolean {\n  return \"A\" <= c && c <= \"Z\";\n}\n\n// TODO: Implement a puzzle-specific way to calculate this.\nfunction baseMetric(move: Move): number {\n  const fam = move.family;\n  if (\n    (isCharUppercase(fam[0]) && fam[fam.length - 1] === \"v\") ||\n    fam === \"x\" ||\n    fam === \"y\" ||\n    fam === \"z\" ||\n    fam === \"T\"\n  ) {\n    return 0;\n  } else {\n    return 1;\n  }\n}\n\n// TODO: Implement a puzzle-specific way to calculate this.\nfunction quantumMetric(move: Move): number {\n  const fam = move.family;\n  if (\n    (isCharUppercase(fam[0]) && fam[fam.length - 1] === \"v\") ||\n    fam === \"x\" ||\n    fam === \"y\" ||\n    fam === \"z\" ||\n    fam === \"T\"\n  ) {\n    return 0;\n  } else {\n    return Math.abs(move.amount);\n  }\n}\n\nconst countMovesInstance = new CountMoves(baseMetric);\nexport const countMoves: (alg: Alg) => number =\n  countMovesInstance.traverseAlg.bind(countMovesInstance);\n\nconst countQuantumMovesInstance = new CountMoves(quantumMetric);\nexport const countQuantumMoves: (alg: Alg) => number =\n  countQuantumMovesInstance.traverseAlg.bind(countQuantumMovesInstance);\n","import {\n  Alg,\n  Commutator,\n  Conjugate,\n  Grouping,\n  LineComment,\n  Move,\n  Newline,\n  Pause,\n  TraversalUp,\n} from \"../alg\";\n\n// TODO: Include Pause, include amounts\nclass CountAnimatedLeaves extends TraversalUp<number, number> {\n  public traverseAlg(alg: Alg): number {\n    let total = 0;\n    for (const part of alg.units()) {\n      total += this.traverseUnit(part);\n    }\n    return total;\n  }\n\n  public traverseGrouping(grouping: Grouping): number {\n    return this.traverseAlg(grouping.alg) * Math.abs(grouping.amount);\n  }\n\n  public traverseMove(_move: Move): number {\n    return 1;\n  }\n\n  public traverseCommutator(commutator: Commutator): number {\n    return (\n      2 * (this.traverseAlg(commutator.A) + this.traverseAlg(commutator.B))\n    );\n  }\n\n  public traverseConjugate(conjugate: Conjugate): number {\n    return 2 * this.traverseAlg(conjugate.A) + this.traverseAlg(conjugate.B);\n  }\n\n  public traversePause(_pause: Pause): number {\n    return 1;\n  }\n\n  public traverseNewline(_newline: Newline): number {\n    return 0;\n  }\n\n  public traverseLineComment(_comment: LineComment): number {\n    return 0;\n  }\n}\n\nconst countAnimatedLeavesInstance = new CountAnimatedLeaves();\nexport const countAnimatedLeaves: (alg: Alg) => number =\n  countAnimatedLeavesInstance.traverseAlg.bind(countAnimatedLeavesInstance);\n","let isInsideWorker = false;\n\nexport function setIsInsideWorker(inside: boolean) {\n  isInsideWorker = inside;\n}\n\nexport function mustBeInsideWorker(): void {\n  if (!isInsideWorker) {\n    throw new Error(\n      \"Must be called from inside a worker, to avoid impact on page performance. Try importing from the top level of `cubing/solve`?\",\n    );\n  }\n}\n","import { Alg, AlgBuilder, Move } from \"../../../alg\";\nimport { randomChoiceFactory } from \"../../../vendor/random-uint-below\";\n\nexport async function addOrientationSuffix(\n  alg: Alg,\n  suffixSpec: (null | string)[][],\n): Promise<Alg> {\n  const algBuilder = new AlgBuilder();\n  algBuilder.experimentalPushAlg(alg);\n  for (const suffix of suffixSpec) {\n    const choice = ((await randomChoiceFactory()) as any)(suffix);\n    if (choice !== null) {\n      algBuilder.push(Move.fromString(choice));\n    }\n  }\n  return algBuilder.toAlg();\n}\n","/*\n\nFace order:\n\n U\nLFRB\n D\n\n         | 0| 1| 2|\n         | 3| 4| 5|\n         | 6| 7| 8|\n| 9|10|11|18|19|20|27|28|29|36|37|38|\n|12|13|14|21|22|23|30|31|32|39|40|41|\n|15|16|17|24|25|26|33|34|35|42|43|44|\n         |45|46|47|\n         |48|49|50|\n         |51|52|53|\n*/\n\nimport type { KState } from \"../../../../../kpuzzle/KState\";\n\nconst reidEdgeOrder = \"UF UR UB UL DF DR DB DL FR FL BR BL\".split(\" \");\nconst reidCornerOrder = \"UFR URB UBL ULF DRF DFL DLB DBR\".split(\" \");\nconst centerOrder = \"U L F R B D\".split(\" \");\n\n// const stickers = [reidEdgeOrder, reidCornerOrder, centerOrder];\n\n// /*\n//                |1 20|0 20|1 10|\n//                |0 30|2 00|0 10|\n//                |1 30|0 00|1 00|\n// |1 22|0 31|1 31|1 32|0 01|1 01|1 02|0 11|1 11|1 12|0 21|1 21|\n// |0111|2 10|0 91|0 90|2 20|0 80|0 81|2 30|0101|0100|2 40|0110|\n// |1 61|0 71|1 52|1 51|0 41|1 42|1 41|0 51|1 72|1 71|0 61|1 62|\n//                |1 50|0 40|1 40|\n//                |0 70|2 50|0 50|\n//                |1 60|0 60|1 70|\n// */\n\nconst map: [number, number, number][] = [\n  [1, 2, 0],\n  [0, 2, 0],\n  [1, 1, 0],\n  [0, 3, 0],\n  [2, 0, 0],\n  [0, 1, 0],\n  [1, 3, 0],\n  [0, 0, 0],\n  [1, 0, 0],\n  [1, 0, 2],\n  [0, 1, 1],\n  [1, 1, 1],\n  [0, 8, 1],\n  [2, 3, 0],\n  [0, 10, 1],\n  [1, 4, 1],\n  [0, 5, 1],\n  [1, 7, 2],\n  [1, 3, 2],\n  [0, 0, 1],\n  [1, 0, 1],\n  [0, 9, 0],\n  [2, 2, 0],\n  [0, 8, 0],\n  [1, 5, 1],\n  [0, 4, 1],\n  [1, 4, 2],\n  [1, 5, 0],\n  [0, 4, 0],\n  [1, 4, 0],\n  [0, 7, 0],\n  [2, 5, 0],\n  [0, 5, 0],\n  [1, 6, 0],\n  [0, 6, 0],\n  [1, 7, 0],\n  [1, 2, 2],\n  [0, 3, 1],\n  [1, 3, 1],\n  [0, 11, 1],\n  [2, 1, 0],\n  [0, 9, 1],\n  [1, 6, 1],\n  [0, 7, 1],\n  [1, 5, 2],\n  [1, 1, 2],\n  [0, 2, 1],\n  [1, 2, 1],\n  [0, 10, 0],\n  [2, 4, 0],\n  [0, 11, 0],\n  [1, 7, 1],\n  [0, 6, 1],\n  [1, 6, 2],\n];\n\nfunction rotateLeft(s: string, i: number): string {\n  return s.slice(i) + s.slice(0, i);\n}\n\nfunction toReid333Struct(state: KState): string[][] {\n  const output: string[][] = [[], []];\n  for (let i = 0; i < 6; i++) {\n    if (state.stateData[\"CENTERS\"].pieces[i] !== i) {\n      throw new Error(\"non-oriented puzzles are not supported\");\n    }\n  }\n  for (let i = 0; i < 12; i++) {\n    output[0].push(\n      rotateLeft(\n        reidEdgeOrder[state.stateData[\"EDGES\"].pieces[i]],\n        state.stateData[\"EDGES\"].orientation[i],\n      ),\n    );\n  }\n  for (let i = 0; i < 8; i++) {\n    output[1].push(\n      rotateLeft(\n        reidCornerOrder[state.stateData[\"CORNERS\"].pieces[i]],\n        state.stateData[\"CORNERS\"].orientation[i],\n      ),\n    );\n  }\n  output.push(centerOrder);\n  return output;\n}\n\n// function toReid333String(state: Transformation): string {\n//   return toReid333Struct(state)\n//     .map((l) => l.join(\" \"))\n//     .join(\" \");\n// }\n\nexport function toMin2PhaseState(state: KState): string {\n  const reid = toReid333Struct(state);\n  return map.map(([orbit, perm, ori]) => reid[orbit][perm][ori]).join(\"\");\n}\n","import { Move } from \"../../../../../alg\";\nimport type { KPuzzle } from \"../../../../../kpuzzle\";\nimport { KState } from \"../../../../../kpuzzle\";\n\nexport function isEquivalentTranformationIgnoringCENTERS(\n  t1: KState,\n  t2: KState,\n): boolean {\n  const t1NoCenterOri = new KState(t1.kpuzzle, {\n    EDGES: t1.stateData.EDGES,\n    CORNERS: t1.stateData.CORNERS,\n    CENTERS: {\n      pieces: t1.stateData.CENTERS.pieces,\n      orientation: new Array(6).fill(0),\n    },\n  }).experimentalToTransformation()!;\n  const t2NoCenterOri = new KState(t2.kpuzzle, {\n    EDGES: t2.stateData.EDGES,\n    CORNERS: t2.stateData.CORNERS,\n    CENTERS: {\n      pieces: t2.stateData.CENTERS.pieces,\n      orientation: new Array(6).fill(0),\n    },\n  }).experimentalToTransformation()!;\n  return t1NoCenterOri.isIdentical(t2NoCenterOri);\n}\n\nexport function passesFilter(kpuzzle: KPuzzle, state: KState): boolean {\n  if (isEquivalentTranformationIgnoringCENTERS(kpuzzle.startState(), state)) {\n    return false;\n  }\n\n  for (const face of \"ULFRBD\") {\n    for (let amount = 1; amount < 4; amount++) {\n      const transformation = kpuzzle\n        .moveToTransformation(new Move(face, amount))\n        .toKState();\n      if (isEquivalentTranformationIgnoringCENTERS(transformation, state)) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n\n// TODO: implement tests\n// {\n//   const def = await puzzles[\"3x3x3\"].def();\n//   const kpuzzle = new KPuzzle(def);\n//   console.log(passesFilter(def, kpuzzle.state));\n//   kpuzzle.applyAlg(parse(\"R\"));\n//   console.log(passesFilter(def, kpuzzle.state));\n//   kpuzzle.applyAlg(parse(\"D\"));\n//   console.log(passesFilter(def, kpuzzle.state));\n//   kpuzzle.reset();\n//   kpuzzle.applyAlg(parse(\"(R' U' R U')5\"));\n//   console.log(passesFilter(def, kpuzzle.state));\n// }\n","// TODO: Verify\nexport const sgs3x3x3: string[][] = [\n  [\n    \"R U'\",\n    \"R2 B\", //\n    \"D2 B2\",\n    \"D' L B'\", //\n    \"R' U'\",\n    \"B\", //\n    \"D B2\",\n    \"R' B\", //\n    \"L' U\",\n    \"L2 B'\", //\n    \"B2\",\n    \"D L B'\", //\n    \"L U\",\n    \"B'\", //\n    \"U'\",\n    \"R B\", //\n    \"D' B2\",\n    \"L B'\", //\n    \"U2\",\n    \"U L' B'\", //\n    \"\",\n    \"U' L' B'\", //\n    \"U\",\n    \"L' B'\",\n  ],\n  [\n    \"F2 L2\",\n    \"F' L'\",\n    \"R' F L2\", //\n    \"D' L2\",\n    \"F L2\",\n    \"F2 L'\", //\n    \"R' F' L'\",\n    \"R2 F L2\",\n    \"R2 F2 L'\", //\n    \"L2\",\n    \"F L'\",\n    \"D' L\", //\n    \"D2 L2\",\n    \"R2 F' L'\",\n    \"D L\", //\n    \"\",\n    \"L2 F L'\",\n    \"L F' L2\", //\n    \"L F L'\",\n    \"F' L2\",\n    \"L'\", //\n    \"D L2\",\n    \"D F L'\",\n    \"L\",\n  ],\n  [\n    \"R B U2 B'\",\n    \"R2 B U' B'\", //\n    \"F2 B U B'\",\n    \"F B2 L' B2\", //\n    \"B2 L B2\",\n    \"B U' B'\", //\n    \"R2 B U2 B'\",\n    \"R' B U' B'\", //\n    \"B2 L' B2\",\n    \"F B U B'\", //\n    \"B2 U' B2\",\n    \"B' L B\", //\n    \"L F' B D' B'\",\n    \"B' U' B2 D B'\", //\n    \"B U2 B'\",\n    \"R B U' B'\", //\n    \"B2 L2 B2\",\n    \"D' B' L B\", //\n    \"B U B'\",\n    \"F' B2 L' B2\", //\n    \"\",\n    \"B2 L' B' U' B'\",\n  ],\n  [\n    \"U F2 L2 U'\",\n    \"F' U L' U'\", //\n    \"F2 U L' U'\",\n    \"U F L2 U'\", //\n    \"U2 B2 U2\",\n    \"R' U' B U\", //\n    \"D2 U L U'\",\n    \"D U2 B' U2\", //\n    \"U L2 U'\",\n    \"F U L' U'\", //\n    \"D U L U'\",\n    \"U2 B' U2\", //\n    \"\",\n    \"U2 B' U' L' U'\", //\n    \"U2 L' U2\",\n    \"U' B U\", //\n    \"U L U'\",\n    \"D' U2 B' U2\", //\n    \"U L' U'\",\n    \"U2 B U2\",\n  ],\n  [\n    \"R' D' F2\",\n    \"F'\", //\n    \"F2\",\n    \"D R F'\", //\n    \"R D' F2\",\n    \"R2 F'\", //\n    \"D' F2\",\n    \"R F'\", //\n    \"F2 R' D' F2\",\n    \"F\", //\n    \"D2 F2\",\n    \"D' R F'\", //\n    \"R2 D' F2\",\n    \"R' F'\", //\n    \"D F2\",\n    \"D2 R F'\", //\n    \"\",\n    \"F R' D' F2\",\n  ],\n  [\n    \"R' D2 F' D F\",\n    \"R F2 R2 F2\",\n    \"R2 F' D2 F\", //\n    \"F' R2 D2 F\",\n    \"L D' L'\",\n    \"D F' D2 F\", //\n    \"F2 R2 F2\",\n    \"R F' D2 F\",\n    \"F' R2 D' F\", //\n    \"F' R' D2 F\",\n    \"F2 R' F2\",\n    \"L D L'\", //\n    \"F' R D' F\",\n    \"F2 R F2\",\n    \"F' D2 F\", //\n    \"\",\n    \"L D2 R D' L'\",\n    \"F' D2 F' R F2\", //\n    \"D2 R2 F2 R2 F2\",\n    \"D F' D' F\",\n    \"F' D F\",\n  ],\n  [\n    \"U F2 U'\",\n    \"R U F' U'\", //\n    \"D R U F2 U'\",\n    \"U F U'\", //\n    \"R2 U F2 U'\",\n    \"R' U F' U'\", //\n    \"R U F2 U'\",\n    \"R2 U F' U'\", //\n    \"\",\n    \"U L D L' F U'\", //\n    \"F2 D' R D F2\",\n    \"D2 U F U'\", //\n    \"R' U F2 U'\",\n    \"U F' U'\", //\n    \"F2 D2 R D2 F2\",\n    \"D U F U'\",\n  ],\n  [\n    \"R2\",\n    \"R' B' D B\", //\n    \"D R'\",\n    \"F' R2 F\", //\n    \"\",\n    \"R B' D B\", //\n    \"R'\",\n    \"B' D B\", //\n    \"D' R'\",\n    \"D2 F' R2 F\", //\n    \"R\",\n    \"R2 B' D B\", //\n    \"D2 R'\",\n    \"B' D' B\",\n  ],\n  [\n    \"R2 D' R2\",\n    \"F' R' F R\",\n    \"R D' R2 D R'\", //\n    \"D2 R2 D2 R2\",\n    \"R' D' F' R F\",\n    \"U F D F' U'\", //\n    \"\",\n    \"R2 D2 B R' B' R'\",\n    \"R' F D' F2 R F\", //\n    \"R2 D R2\",\n    \"F2 U F U' F\",\n    \"R' D F' R F\", //\n    \"D R2 D2 R2\",\n    \"U F D' F' U'\",\n    \"D R' D2 F' R F\", //\n    \"R2 D2 R2\",\n    \"U F D2 F' U'\",\n    \"R' D2 F' R F\",\n  ],\n  [\n    \"B R B'\",\n    \"F D F' B R2 B'\", //\n    \"D B R2 B'\",\n    \"D2 B R' B'\", //\n    \"B R2 B'\",\n    \"D B R' B'\", //\n    \"D' B R2 B'\",\n    \"B R' B'\", //\n    \"\",\n    \"B R2 B' D B R' B'\", //\n    \"D2 B R2 B'\",\n    \"D' B R' B'\",\n  ],\n  [\n    \"\",\n    \"R' D R F D2 F'\", //\n    \"R' D R\",\n    \"D F D' F'\", //\n    \"R F' R' F\",\n    \"F D' F'\", //\n    \"R' D' R\",\n    \"F D2 F'\", //\n    \"R' D2 R\",\n    \"F D F'\",\n  ],\n  [\n    \"\",\n    \"F2 D2 R F' R' D2 F' D2 F'\",\n    \"F2 D2 F' D' F D' F' D2 F'\", //\n    \"F2 D F2 D F2 D2 F2\",\n    \"D2 F L D2 L' D2 F'\",\n    \"D F D2 L D2 L' F'\", //\n    \"R' D B' D2 B D' R\",\n    \"R' D2 B' D2 B R\",\n    \"F D2 F' D F D F'\", //\n    \"F D' L D2 L' D F'\",\n    \"B D' F D B' D' F'\",\n    \"F D2 L D2 L' F'\", //\n    \"F D' L D L' D F'\",\n    \"F L D2 L' D2 F'\",\n    \"R' B' D2 B D2 R\",\n  ],\n  [\n    \"D'\",\n    \"F L D L' D' F'\", //\n    \"D2\",\n    \"L B D B' D' L'\", //\n    \"D\",\n    \"B' L' D' L D B\", //\n    \"\",\n    \"D F L D L' D' F'\",\n  ],\n  [\n    \"F' D2 F D F' D F\",\n    \"F' D' R' D R F\", //\n    \"F' R' D' R D F\",\n    \"B D R D' R' B'\", //\n    \"\",\n    \"D B' D' L' D L B\",\n  ],\n  [\n    \"D F D F' D F D2 F'\",\n    \"F' U2 B' R' B U2 F' L F' L' F'\", //\n    \"\",\n    \"D2 L D L2 F L F2 D F\",\n  ],\n  [\n    \"L B' L' F L B L' F'\",\n    \"F2 U F' D2 F U' F' D2 F'\",\n    \"D' F' D B D' F D B'\", //\n    \"F L2 F R2 F' L2 F R2 F2\",\n    \"D B D' F' D B' D' F\",\n    \"R F L F' R' F L' F'\", //\n    \"\",\n    \"D2 B L' U2 L B' D2 B L' U2 L B'\",\n    \"D2 F R' U2 R F' D2 F R' U2 R F'\", //\n    \"R F L' F' R' F L F'\",\n    \"D F D' B' D F' D' B\",\n    \"L2 F2 L' B2 L F2 L' B2 L'\",\n  ],\n  [\n    \"L B R' B' L' B R B'\",\n    \"R' B R F' R' B' R F\",\n    \"L D2 L U L' D2 L U' L2\", //\n    \"\",\n    \"D2 B' D2 F D' L2 F L2 F' D2 B D' F'\",\n    \"D2 F' R' F R2 B' D2 B D2 R' F D2 F'\", //\n    \"L B L' F L B' L' F'\",\n    \"F' D2 F' U' F D2 F' U F2\",\n    \"D' B' D F D' B D F'\",\n  ],\n  [\"\", \"D2 F' L U2 L' F D2 F' L U2 L' F\", \"D2 B' R U2 R' B D2 B' R U2 R' B\"],\n];\n","import { Alg, AlgBuilder } from \"../../../../../alg\";\nimport type { KState } from \"../../../../../kpuzzle/KState\";\nimport { puzzles } from \"../../../../../puzzles\";\nimport { randomChoiceFactory } from \"../../../../../vendor/random-uint-below\";\nimport { mustBeInsideWorker } from \"../../../inside-worker\";\nimport { addOrientationSuffix } from \"../../addOrientationSuffix\";\nimport { toMin2PhaseState } from \"./convert\";\nimport { passesFilter } from \"./filter\";\nimport { sgs3x3x3 } from \"./legacy-sgs\";\n\nexport async function random333State(): Promise<KState> {\n  const kpuzzle = await puzzles[\"3x3x3\"].kpuzzle();\n  let state = kpuzzle.startState();\n  for (const piece of sgs3x3x3) {\n    state = state.applyAlg(\n      Alg.fromString(((await randomChoiceFactory()) as any)(piece)),\n    );\n  }\n  if (!passesFilter(kpuzzle, state)) {\n    return random333State();\n  }\n  return state;\n}\n\nlet cachedImport: Promise<\n  typeof import(\"../../../../../vendor/min2phase/3x3x3-min2phase\")\n> | null = null;\nfunction dynamicMin2phaseGWT(): Promise<\n  typeof import(\"../../../../../vendor/min2phase/3x3x3-min2phase\")\n> {\n  return (cachedImport ??= import(\n    \"../../../../../vendor/min2phase/3x3x3-min2phase\"\n  ));\n}\n\nexport async function solve333(s: KState): Promise<Alg> {\n  mustBeInsideWorker();\n  return Alg.fromString(\n    (await dynamicMin2phaseGWT()).solveState(toMin2PhaseState(s)),\n  );\n}\n\nexport async function random333Scramble(): Promise<Alg> {\n  return solve333(await random333State());\n}\n\nexport async function initialize333(): Promise<void> {\n  (await dynamicMin2phaseGWT()).initialize();\n}\n\nconst randomSuffixes = [\n  [null, \"Rw\", \"Rw2\", \"Rw'\", \"Fw\", \"Fw'\"],\n  [null, \"Dw\", \"Dw2\", \"Dw'\"],\n];\n\nexport async function random333OrientedScramble(): Promise<Alg> {\n  return addOrientationSuffix(await random333Scramble(), randomSuffixes);\n}\n\nconst extraBit = new Alg(\"R' U' F\");\nexport async function random333FewestMovesScramble(): Promise<Alg> {\n  const algBuilder = new AlgBuilder();\n  const unorientedScramble = await random333Scramble();\n  algBuilder.experimentalPushAlg(extraBit);\n  // TODO:Avoid cancellable moves.\n  algBuilder.experimentalPushAlg(unorientedScramble);\n  algBuilder.experimentalPushAlg(extraBit);\n  return algBuilder.toAlg();\n}\n","module.exports = (__parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"bDe2m\"))).then(() => parcelRequire('7i0aL'));"],"names":["parcelRequire","register","JSON","parse","$5d43be64171ec656$var$cryptoPromise","$5d43be64171ec656$var$MAX_JS_PRECISE_INT","$5d43be64171ec656$export$ae01e9048b60c0a9","getRandomValues","globalThis","crypto","bind","import","replace","webcrypto","$5d43be64171ec656$var$getRandomValuesFactory","randomUIntBelow","max","Math","floor","Error","$5d43be64171ec656$var$validateMax","val","arr","Uint32Array","upper","lower","$5d43be64171ec656$var$random53BitValue","$5d43be64171ec656$export$98586edbcb99b815","length","$5d43be64171ec656$var$randomUIntBelowPromise","$5d43be64171ec656$export$5812f237741b8d96","list","i","j","$947d6caa6417a9fd$var$CountMoves","$98KNc","TraversalUp","metric","super","this","traverseAlg","alg","r","unit","units","traverseUnit","traverseGrouping","grouping","abs","amount","traverseMove","move","traverseCommutator","commutator","A","B","traverseConjugate","conjugate","traversePause","_pause","traverseNewline","_newLine","traverseLineComment","_comment","$947d6caa6417a9fd$var$isCharUppercase","c","$947d6caa6417a9fd$var$countMovesInstance","fam","family","$947d6caa6417a9fd$export$3bb9ec80d65f79cf","$947d6caa6417a9fd$var$countQuantumMovesInstance","$947d6caa6417a9fd$var$countAnimatedLeavesInstance","total","part","_move","_newline","$947d6caa6417a9fd$export$d5ea806fd922b359","$b6da79917169cfa7$var$isInsideWorker","$b6da79917169cfa7$export$4a0e78d9b11ae97c","inside","$b6da79917169cfa7$export$131540c083e88da","$b6da79917169cfa7$export$7e83b7d07af7e9e2","suffixSpec","algBuilder","AlgBuilder","experimentalPushAlg","suffix","choice","$80rC8","randomChoiceFactory","push","Move","fromString","toAlg","$b6da79917169cfa7$var$reidEdgeOrder","split","$b6da79917169cfa7$var$reidCornerOrder","$b6da79917169cfa7$var$centerOrder","$b6da79917169cfa7$var$map","$b6da79917169cfa7$var$rotateLeft","s","slice","$b6da79917169cfa7$var$toMin2PhaseState","state","reid","output","stateData","pieces","i1","orientation","i2","$b6da79917169cfa7$var$toReid333Struct","map","orbit","perm","ori","join","$b6da79917169cfa7$var$isEquivalentTranformationIgnoringCENTERS","t1","t2","t1NoCenterOri","$dKxIg","KState","kpuzzle","EDGES","CORNERS","CENTERS","Array","fill","experimentalToTransformation","t2NoCenterOri","isIdentical","$b6da79917169cfa7$var$sgs3x3x3","$b6da79917169cfa7$export$dcdf05932adb0752","$71WRK","puzzles","startState","piece","applyAlg","Alg","face","moveToTransformation","toKState","$b6da79917169cfa7$var$passesFilter","$b6da79917169cfa7$var$cachedImport","$b6da79917169cfa7$var$dynamicMin2phaseGWT","$b6da79917169cfa7$export$2f75684bd34a511","solveState","$b6da79917169cfa7$export$5e8649e6d718e8b9","$b6da79917169cfa7$export$62ea2c97ff55c327","initialize","$b6da79917169cfa7$var$randomSuffixes","$b6da79917169cfa7$export$309e41f55d201b91","$b6da79917169cfa7$var$extraBit","$b6da79917169cfa7$export$5dbda9cc3470e03d","unorientedScramble","module","exports","resolve","then"],"version":3,"file":"index.44f3d9cc.js.map"}
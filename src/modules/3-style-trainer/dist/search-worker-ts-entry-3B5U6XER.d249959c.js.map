{"mappings":"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","sources":["node_modules/cubing/src/cubing/search/inside/search-worker-ts-entry.ts","node_modules/cubing/src/cubing/vendor/comlink-everywhere/inside/index.ts","node_modules/cubing/src/cubing/vendor/comlink-everywhere/node-adapter.ts","node_modules/comlink/src/comlink.ts","node_modules/cubing/src/cubing/search/inside/worker-guard.ts","node_modules/@parcel/runtime-js/lib/runtime-acaa6b83b6dbf35e.js","node_modules/@parcel/runtime-js/lib/helpers/bundle-manifest.js"],"sourcesContent":["import { nodeEndpointPort } from \"../../vendor/comlink-everywhere/inside/index\";\nimport { exposeAPI } from \"./worker-guard\";\n\nif (exposeAPI.expose) {\n  (async () => {\n    await import(\"./search-worker-js-entry.js\");\n\n    // // Workaround for `node`\n    const messagePort = (globalThis as any).postMessage\n      ? globalThis\n      : await nodeEndpointPort();\n    messagePort.postMessage(\"comlink-exposed\");\n  })();\n}\n\nexport const WORKER_ENTRY_FILE_URL = import.meta.url;\n","import { expose as comlinkExpose } from \"comlink\";\nimport nodeEndpoint from \"../node-adapter\";\n\nconst useNodeWorkarounds =\n  typeof globalThis.Worker === \"undefined\" &&\n  typeof (globalThis as any).WorkerNavigator === \"undefined\";\n\n// Mangled so that bundlers don't try to inline the source.\nconst worker_threads_mangled = \"w-orker-_threa-ds\";\nconst worker_threads_unmangled = () => worker_threads_mangled.replace(/-/g, \"\");\n\nexport async function nodeEndpointPort(): Promise<\n  Worker & {\n    nodeWorker?: import(\"worker_threads\").Worker;\n  }\n> {\n  const { parentPort } = await import(worker_threads_unmangled()).catch();\n  return nodeEndpoint(parentPort);\n}\n\nexport function expose(api: any) {\n  if (useNodeWorkarounds) {\n    (async () => {\n      comlinkExpose(api, await nodeEndpointPort());\n    })();\n  } else {\n    comlinkExpose(api);\n  }\n}\n","import type { Worker as NodeWorker } from \"worker_threads\";\n\n/**\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\ntype EventHandler = EventListenerObject | ((event: any) => void);\n\nfunction nodeEndpoint(nep: NodeWorker): Worker & {\n  nodeWorker?: import(\"worker_threads\").Worker;\n} {\n  const listeners = new WeakMap();\n  return {\n    postMessage: nep.postMessage.bind(nep),\n    addEventListener: (_: string, eh: EventHandler) => {\n      const l = (data: Event) => {\n        if (\"handleEvent\" in eh) {\n          eh.handleEvent({ data } as any);\n        } else {\n          eh({ data });\n        }\n      };\n      nep.on(\"message\", l);\n      listeners.set(eh, l);\n    },\n    removeEventListener: (_: string, eh: EventHandler) => {\n      const l = listeners.get(eh);\n      if (!l) {\n        return;\n      }\n      nep.off(\"message\", l);\n      listeners.delete(eh);\n    },\n    nodeWorker: nep,\n    // start: nep.start && nep.start.bind(nep),\n  } as Worker & {\n    nodeWorker?: import(\"worker_threads\").Worker;\n  };\n}\n\nexport default nodeEndpoint;\n//# sourceMappingURL=node-adapter.mjs.map\n","/**\n * Copyright 2019 Google Inc. All Rights Reserved.\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *     http://www.apache.org/licenses/LICENSE-2.0\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  Endpoint,\n  EventSource,\n  Message,\n  MessageType,\n  PostMessageWithOrigin,\n  WireValue,\n  WireValueType,\n} from \"./protocol\";\nexport { Endpoint };\n\nexport const proxyMarker = Symbol(\"Comlink.proxy\");\nexport const createEndpoint = Symbol(\"Comlink.endpoint\");\nexport const releaseProxy = Symbol(\"Comlink.releaseProxy\");\n\nconst throwMarker = Symbol(\"Comlink.thrown\");\n\n/**\n * Interface of values that were marked to be proxied with `comlink.proxy()`.\n * Can also be implemented by classes.\n */\nexport interface ProxyMarked {\n  [proxyMarker]: true;\n}\n\n/**\n * Takes a type and wraps it in a Promise, if it not already is one.\n * This is to avoid `Promise<Promise<T>>`.\n *\n * This is the inverse of `Unpromisify<T>`.\n */\ntype Promisify<T> = T extends Promise<unknown> ? T : Promise<T>;\n/**\n * Takes a type that may be Promise and unwraps the Promise type.\n * If `P` is not a Promise, it returns `P`.\n *\n * This is the inverse of `Promisify<T>`.\n */\ntype Unpromisify<P> = P extends Promise<infer T> ? T : P;\n\n/**\n * Takes the raw type of a remote property and returns the type that is visible to the local thread on the proxy.\n *\n * Note: This needs to be its own type alias, otherwise it will not distribute over unions.\n * See https://www.typescriptlang.org/docs/handbook/advanced-types.html#distributive-conditional-types\n */\ntype RemoteProperty<T> =\n  // If the value is a method, comlink will proxy it automatically.\n  // Objects are only proxied if they are marked to be proxied.\n  // Otherwise, the property is converted to a Promise that resolves the cloned value.\n  T extends Function | ProxyMarked ? Remote<T> : Promisify<T>;\n\n/**\n * Takes the raw type of a property as a remote thread would see it through a proxy (e.g. when passed in as a function\n * argument) and returns the type that the local thread has to supply.\n *\n * This is the inverse of `RemoteProperty<T>`.\n *\n * Note: This needs to be its own type alias, otherwise it will not distribute over unions. See\n * https://www.typescriptlang.org/docs/handbook/advanced-types.html#distributive-conditional-types\n */\ntype LocalProperty<T> = T extends Function | ProxyMarked\n  ? Local<T>\n  : Unpromisify<T>;\n\n/**\n * Proxies `T` if it is a `ProxyMarked`, clones it otherwise (as handled by structured cloning and transfer handlers).\n */\nexport type ProxyOrClone<T> = T extends ProxyMarked ? Remote<T> : T;\n/**\n * Inverse of `ProxyOrClone<T>`.\n */\nexport type UnproxyOrClone<T> = T extends RemoteObject<ProxyMarked>\n  ? Local<T>\n  : T;\n\n/**\n * Takes the raw type of a remote object in the other thread and returns the type as it is visible to the local thread\n * when proxied with `Comlink.proxy()`.\n *\n * This does not handle call signatures, which is handled by the more general `Remote<T>` type.\n *\n * @template T The raw type of a remote object as seen in the other thread.\n */\nexport type RemoteObject<T> = { [P in keyof T]: RemoteProperty<T[P]> };\n/**\n * Takes the type of an object as a remote thread would see it through a proxy (e.g. when passed in as a function\n * argument) and returns the type that the local thread has to supply.\n *\n * This does not handle call signatures, which is handled by the more general `Local<T>` type.\n *\n * This is the inverse of `RemoteObject<T>`.\n *\n * @template T The type of a proxied object.\n */\nexport type LocalObject<T> = { [P in keyof T]: LocalProperty<T[P]> };\n\n/**\n * Additional special comlink methods available on each proxy returned by `Comlink.wrap()`.\n */\nexport interface ProxyMethods {\n  [createEndpoint]: () => Promise<MessagePort>;\n  [releaseProxy]: () => void;\n}\n\n/**\n * Takes the raw type of a remote object, function or class in the other thread and returns the type as it is visible to\n * the local thread from the proxy return value of `Comlink.wrap()` or `Comlink.proxy()`.\n */\nexport type Remote<T> =\n  // Handle properties\n  RemoteObject<T> &\n    // Handle call signature (if present)\n    (T extends (...args: infer TArguments) => infer TReturn\n      ? (\n          ...args: { [I in keyof TArguments]: UnproxyOrClone<TArguments[I]> }\n        ) => Promisify<ProxyOrClone<Unpromisify<TReturn>>>\n      : unknown) &\n    // Handle construct signature (if present)\n    // The return of construct signatures is always proxied (whether marked or not)\n    (T extends { new (...args: infer TArguments): infer TInstance }\n      ? {\n          new (\n            ...args: {\n              [I in keyof TArguments]: UnproxyOrClone<TArguments[I]>;\n            }\n          ): Promisify<Remote<TInstance>>;\n        }\n      : unknown) &\n    // Include additional special comlink methods available on the proxy.\n    ProxyMethods;\n\n/**\n * Expresses that a type can be either a sync or async.\n */\ntype MaybePromise<T> = Promise<T> | T;\n\n/**\n * Takes the raw type of a remote object, function or class as a remote thread would see it through a proxy (e.g. when\n * passed in as a function argument) and returns the type the local thread has to supply.\n *\n * This is the inverse of `Remote<T>`. It takes a `Remote<T>` and returns its original input `T`.\n */\nexport type Local<T> =\n  // Omit the special proxy methods (they don't need to be supplied, comlink adds them)\n  Omit<LocalObject<T>, keyof ProxyMethods> &\n    // Handle call signatures (if present)\n    (T extends (...args: infer TArguments) => infer TReturn\n      ? (\n          ...args: { [I in keyof TArguments]: ProxyOrClone<TArguments[I]> }\n        ) => // The raw function could either be sync or async, but is always proxied automatically\n        MaybePromise<UnproxyOrClone<Unpromisify<TReturn>>>\n      : unknown) &\n    // Handle construct signature (if present)\n    // The return of construct signatures is always proxied (whether marked or not)\n    (T extends { new (...args: infer TArguments): infer TInstance }\n      ? {\n          new (\n            ...args: {\n              [I in keyof TArguments]: ProxyOrClone<TArguments[I]>;\n            }\n          ): // The raw constructor could either be sync or async, but is always proxied automatically\n          MaybePromise<Local<Unpromisify<TInstance>>>;\n        }\n      : unknown);\n\nconst isObject = (val: unknown): val is object =>\n  (typeof val === \"object\" && val !== null) || typeof val === \"function\";\n\n/**\n * Customizes the serialization of certain values as determined by `canHandle()`.\n *\n * @template T The input type being handled by this transfer handler.\n * @template S The serialized type sent over the wire.\n */\nexport interface TransferHandler<T, S> {\n  /**\n   * Gets called for every value to determine whether this transfer handler\n   * should serialize the value, which includes checking that it is of the right\n   * type (but can perform checks beyond that as well).\n   */\n  canHandle(value: unknown): value is T;\n\n  /**\n   * Gets called with the value if `canHandle()` returned `true` to produce a\n   * value that can be sent in a message, consisting of structured-cloneable\n   * values and/or transferrable objects.\n   */\n  serialize(value: T): [S, Transferable[]];\n\n  /**\n   * Gets called to deserialize an incoming value that was serialized in the\n   * other thread with this transfer handler (known through the name it was\n   * registered under).\n   */\n  deserialize(value: S): T;\n}\n\n/**\n * Internal transfer handle to handle objects marked to proxy.\n */\nconst proxyTransferHandler: TransferHandler<object, MessagePort> = {\n  canHandle: (val): val is ProxyMarked =>\n    isObject(val) && (val as ProxyMarked)[proxyMarker],\n  serialize(obj) {\n    const { port1, port2 } = new MessageChannel();\n    expose(obj, port1);\n    return [port2, [port2]];\n  },\n  deserialize(port) {\n    port.start();\n    return wrap(port);\n  },\n};\n\ninterface ThrownValue {\n  [throwMarker]: unknown; // just needs to be present\n  value: unknown;\n}\ntype SerializedThrownValue =\n  | { isError: true; value: Error }\n  | { isError: false; value: unknown };\n\n/**\n * Internal transfer handler to handle thrown exceptions.\n */\nconst throwTransferHandler: TransferHandler<\n  ThrownValue,\n  SerializedThrownValue\n> = {\n  canHandle: (value): value is ThrownValue =>\n    isObject(value) && throwMarker in value,\n  serialize({ value }) {\n    let serialized: SerializedThrownValue;\n    if (value instanceof Error) {\n      serialized = {\n        isError: true,\n        value: {\n          message: value.message,\n          name: value.name,\n          stack: value.stack,\n        },\n      };\n    } else {\n      serialized = { isError: false, value };\n    }\n    return [serialized, []];\n  },\n  deserialize(serialized) {\n    if (serialized.isError) {\n      throw Object.assign(\n        new Error(serialized.value.message),\n        serialized.value\n      );\n    }\n    throw serialized.value;\n  },\n};\n\n/**\n * Allows customizing the serialization of certain values.\n */\nexport const transferHandlers = new Map<\n  string,\n  TransferHandler<unknown, unknown>\n>([\n  [\"proxy\", proxyTransferHandler],\n  [\"throw\", throwTransferHandler],\n]);\n\nexport function expose(obj: any, ep: Endpoint = self as any) {\n  ep.addEventListener(\"message\", function callback(ev: MessageEvent) {\n    if (!ev || !ev.data) {\n      return;\n    }\n    const { id, type, path } = {\n      path: [] as string[],\n      ...(ev.data as Message),\n    };\n    const argumentList = (ev.data.argumentList || []).map(fromWireValue);\n    let returnValue;\n    try {\n      const parent = path.slice(0, -1).reduce((obj, prop) => obj[prop], obj);\n      const rawValue = path.reduce((obj, prop) => obj[prop], obj);\n      switch (type) {\n        case MessageType.GET:\n          {\n            returnValue = rawValue;\n          }\n          break;\n        case MessageType.SET:\n          {\n            parent[path.slice(-1)[0]] = fromWireValue(ev.data.value);\n            returnValue = true;\n          }\n          break;\n        case MessageType.APPLY:\n          {\n            returnValue = rawValue.apply(parent, argumentList);\n          }\n          break;\n        case MessageType.CONSTRUCT:\n          {\n            const value = new rawValue(...argumentList);\n            returnValue = proxy(value);\n          }\n          break;\n        case MessageType.ENDPOINT:\n          {\n            const { port1, port2 } = new MessageChannel();\n            expose(obj, port2);\n            returnValue = transfer(port1, [port1]);\n          }\n          break;\n        case MessageType.RELEASE:\n          {\n            returnValue = undefined;\n          }\n          break;\n        default:\n          return;\n      }\n    } catch (value) {\n      returnValue = { value, [throwMarker]: 0 };\n    }\n    Promise.resolve(returnValue)\n      .catch((value) => {\n        return { value, [throwMarker]: 0 };\n      })\n      .then((returnValue) => {\n        const [wireValue, transferables] = toWireValue(returnValue);\n        ep.postMessage({ ...wireValue, id }, transferables);\n        if (type === MessageType.RELEASE) {\n          // detach and deactive after sending release response above.\n          ep.removeEventListener(\"message\", callback as any);\n          closeEndPoint(ep);\n        }\n      });\n  } as any);\n  if (ep.start) {\n    ep.start();\n  }\n}\n\nfunction isMessagePort(endpoint: Endpoint): endpoint is MessagePort {\n  return endpoint.constructor.name === \"MessagePort\";\n}\n\nfunction closeEndPoint(endpoint: Endpoint) {\n  if (isMessagePort(endpoint)) endpoint.close();\n}\n\nexport function wrap<T>(ep: Endpoint, target?: any): Remote<T> {\n  return createProxy<T>(ep, [], target) as any;\n}\n\nfunction throwIfProxyReleased(isReleased: boolean) {\n  if (isReleased) {\n    throw new Error(\"Proxy has been released and is not useable\");\n  }\n}\n\nfunction createProxy<T>(\n  ep: Endpoint,\n  path: (string | number | symbol)[] = [],\n  target: object = function () {}\n): Remote<T> {\n  let isProxyReleased = false;\n  const proxy = new Proxy(target, {\n    get(_target, prop) {\n      throwIfProxyReleased(isProxyReleased);\n      if (prop === releaseProxy) {\n        return () => {\n          return requestResponseMessage(ep, {\n            type: MessageType.RELEASE,\n            path: path.map((p) => p.toString()),\n          }).then(() => {\n            closeEndPoint(ep);\n            isProxyReleased = true;\n          });\n        };\n      }\n      if (prop === \"then\") {\n        if (path.length === 0) {\n          return { then: () => proxy };\n        }\n        const r = requestResponseMessage(ep, {\n          type: MessageType.GET,\n          path: path.map((p) => p.toString()),\n        }).then(fromWireValue);\n        return r.then.bind(r);\n      }\n      return createProxy(ep, [...path, prop]);\n    },\n    set(_target, prop, rawValue) {\n      throwIfProxyReleased(isProxyReleased);\n      // FIXME: ES6 Proxy Handler `set` methods are supposed to return a\n      // boolean. To show good will, we return true asynchronously ¯\\_(ツ)_/¯\n      const [value, transferables] = toWireValue(rawValue);\n      return requestResponseMessage(\n        ep,\n        {\n          type: MessageType.SET,\n          path: [...path, prop].map((p) => p.toString()),\n          value,\n        },\n        transferables\n      ).then(fromWireValue) as any;\n    },\n    apply(_target, _thisArg, rawArgumentList) {\n      throwIfProxyReleased(isProxyReleased);\n      const last = path[path.length - 1];\n      if ((last as any) === createEndpoint) {\n        return requestResponseMessage(ep, {\n          type: MessageType.ENDPOINT,\n        }).then(fromWireValue);\n      }\n      // We just pretend that `bind()` didn’t happen.\n      if (last === \"bind\") {\n        return createProxy(ep, path.slice(0, -1));\n      }\n      const [argumentList, transferables] = processArguments(rawArgumentList);\n      return requestResponseMessage(\n        ep,\n        {\n          type: MessageType.APPLY,\n          path: path.map((p) => p.toString()),\n          argumentList,\n        },\n        transferables\n      ).then(fromWireValue);\n    },\n    construct(_target, rawArgumentList) {\n      throwIfProxyReleased(isProxyReleased);\n      const [argumentList, transferables] = processArguments(rawArgumentList);\n      return requestResponseMessage(\n        ep,\n        {\n          type: MessageType.CONSTRUCT,\n          path: path.map((p) => p.toString()),\n          argumentList,\n        },\n        transferables\n      ).then(fromWireValue);\n    },\n  });\n  return proxy as any;\n}\n\nfunction myFlat<T>(arr: (T | T[])[]): T[] {\n  return Array.prototype.concat.apply([], arr);\n}\n\nfunction processArguments(argumentList: any[]): [WireValue[], Transferable[]] {\n  const processed = argumentList.map(toWireValue);\n  return [processed.map((v) => v[0]), myFlat(processed.map((v) => v[1]))];\n}\n\nconst transferCache = new WeakMap<any, Transferable[]>();\nexport function transfer<T>(obj: T, transfers: Transferable[]): T {\n  transferCache.set(obj, transfers);\n  return obj;\n}\n\nexport function proxy<T>(obj: T): T & ProxyMarked {\n  return Object.assign(obj, { [proxyMarker]: true }) as any;\n}\n\nexport function windowEndpoint(\n  w: PostMessageWithOrigin,\n  context: EventSource = self,\n  targetOrigin = \"*\"\n): Endpoint {\n  return {\n    postMessage: (msg: any, transferables: Transferable[]) =>\n      w.postMessage(msg, targetOrigin, transferables),\n    addEventListener: context.addEventListener.bind(context),\n    removeEventListener: context.removeEventListener.bind(context),\n  };\n}\n\nfunction toWireValue(value: any): [WireValue, Transferable[]] {\n  for (const [name, handler] of transferHandlers) {\n    if (handler.canHandle(value)) {\n      const [serializedValue, transferables] = handler.serialize(value);\n      return [\n        {\n          type: WireValueType.HANDLER,\n          name,\n          value: serializedValue,\n        },\n        transferables,\n      ];\n    }\n  }\n  return [\n    {\n      type: WireValueType.RAW,\n      value,\n    },\n    transferCache.get(value) || [],\n  ];\n}\n\nfunction fromWireValue(value: WireValue): any {\n  switch (value.type) {\n    case WireValueType.HANDLER:\n      return transferHandlers.get(value.name)!.deserialize(value.value);\n    case WireValueType.RAW:\n      return value.value;\n  }\n}\n\nfunction requestResponseMessage(\n  ep: Endpoint,\n  msg: Message,\n  transfers?: Transferable[]\n): Promise<WireValue> {\n  return new Promise((resolve) => {\n    const id = generateUUID();\n    ep.addEventListener(\"message\", function l(ev: MessageEvent) {\n      if (!ev.data || !ev.data.id || ev.data.id !== id) {\n        return;\n      }\n      ep.removeEventListener(\"message\", l as any);\n      resolve(ev.data);\n    } as any);\n    if (ep.start) {\n      ep.start();\n    }\n    ep.postMessage({ id, ...msg }, transfers);\n  });\n}\n\nfunction generateUUID(): string {\n  return new Array(4)\n    .fill(0)\n    .map(() => Math.floor(Math.random() * Number.MAX_SAFE_INTEGER).toString(16))\n    .join(\"-\");\n}\n","export const exposeAPI: { expose: boolean } = {\n  expose: true,\n};\n","module.exports = Promise.all([__parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"adU6T\")), __parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"30J38\")), __parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"hPxUV\")), __parcel__import__(\"./\" + require('./helpers/bundle-manifest').resolve(\"lU41E\"))]).then(() => parcelRequire('k1he1'));","\"use strict\";\n\nvar mapping = {};\n\nfunction register(pairs) {\n  var keys = Object.keys(pairs);\n\n  for (var i = 0; i < keys.length; i++) {\n    mapping[keys[i]] = pairs[keys[i]];\n  }\n}\n\nfunction resolve(id) {\n  var resolved = mapping[id];\n\n  if (resolved == null) {\n    throw new Error('Could not resolve bundle with id ' + id);\n  }\n\n  return resolved;\n}\n\nmodule.exports.register = register;\nmodule.exports.resolve = resolve;"],"names":["$hgslF","exposeAPI","expose","parcelRequire","globalThis","postMessage","$hj3SW","nodeEndpointPort","$08e9349d7f91c8ec$export$37b5d21eb7557c91","$c9973983ea81d8f4$var$useNodeWorkarounds","Worker","WorkerNavigator","$c9973983ea81d8f4$export$9ec037716bf04bbb","parentPort","import","replace","catch","$e2g4C","node_adapter_default","$c9973983ea81d8f4$export$9b7f6e342a8cbd38","api","$dLq9J","$a37db86ddd0f95e6$export$8a540259358b117f","nep","listeners","WeakMap","bind","addEventListener","_","eh","l","data","handleEvent","on","set","removeEventListener","get","off","delete","nodeWorker","$0e112480d1414235$export$be5234c0b764b6e0","Symbol","val","$0e112480d1414235$export$ab8f1c00731ee83e","Map","$0e112480d1414235$var$isObject","serialize","obj","port1","port2","MessageChannel","port","value","$0e112480d1414235$var$throwMarker","serialized","Error","isError","message","name","stack","Object","assign","obj1","ep","self","callback","ev","id","type","path","argumentList","map","$0e112480d1414235$var$fromWireValue","slice","reduce","prop","rawValue","returnValue1","apply","parent","$0e112480d1414235$export$9b7f6e342a8cbd38","transfers","$0e112480d1414235$var$transferCache","$0e112480d1414235$export$c9b234447cf4ef7c","undefined","value1","Promise","resolve","then","returnValue","wireValue","transferables","$0e112480d1414235$var$toWireValue","$0e112480d1414235$var$closeEndPoint","start","endpoint","constructor","close","target","isReleased","Proxy","isProxyReleased","$0e112480d1414235$var$requestResponseMessage","p","toString","r","_target","$0e112480d1414235$var$throwIfProxyReleased","_thisArg","rawArgumentList","last","length","$0e112480d1414235$export$39fb953702b7fcd7","$0e112480d1414235$var$createProxy","$0e112480d1414235$var$processArguments","construct","$0e112480d1414235$export$923f96dd5afa9ce6","processed","v","arr","Array","prototype","concat","handler","canHandle","serializedValue","deserialize","msg","$c919ebb1009cc999$export$d7dd397fae3d388","module","exports","all","$18c11f3350a906ea$export$6503ec6e8aabbaf","$18c11f3350a906ea$export$f7ad0328861e2f03","$18c11f3350a906ea$var$mapping","pairs","keys","i","resolved"],"version":3,"file":"search-worker-ts-entry-3B5U6XER.d249959c.js.map"}